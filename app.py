import secrets
import os
from flask import Flask, request, render_template, flash
import json
import datetime
import yfinance as yf

# create an instance of the Flask class, with the name of the running application and the paths for the static files and templates
app = Flask(__name__, static_folder='static', template_folder="templates")

# set the upload folder to the absolute path of the "upload_folder" directory
app.config['UPLOAD_FOLDER'] = os.path.abspath("upload_folder")

# set the lifetime of a session to one hour
app.config["PERMANENT_SESSION_LIFETIME"] = datetime.timedelta(hours=1)

# set the secret key to a random string generated by the secrets module
app.config["SECRET_KEY"] = secrets.token_hex()


# Function to fetch stock data
def get_stock_info(symbol):
    try:
        stock = yf.Ticker(symbol)
        return stock.info["website"], stock.info["currentPrice"]
    except:
        return None, None


@app.route('/impute-form', methods=['POST'])
def impute_form():
    with open("static/data.json", "r") as file:
        data = json.load(file)

    stock = request.form.get("buy", "")
    website, price = get_stock_info(stock)

    if not price:
        return render_template("index.html", money=data["money"], stock=stock,
                               stocks_list=data["stocks_list"], stocks_dict=data["stocks_dict"])

    return render_template("buy.html", money=data["money"], website=website, price=price, stock=stock)


@app.route('/impute-form2', methods=['POST'])
def impute_form2():
    with open("static/data.json", "r") as file:
        data = json.load(file)

    money = data["money"]
    amount = int(request.form.get("amount"))
    price = float(request.form.get("price_hidden"))
    total_of = price * amount
    stock = request.form.get("stock_hidden")

    if total_of > money:
        return render_template("index.html", money=data["money"],
                               message="Transaction incomplete - Not enough money to buy!",
                               stocks_list=data["stocks_list"], stocks_dict=data["stocks_dict"])
    else:
        money -= total_of

    data["money"] = money

    if stock not in data["stocks_list"]:
        data["stocks_list"] += [stock]

    if stock not in data["stocks_dict"]:
        data["stocks_dict"][stock] = {"amount": amount}
    else:
        data["stocks_dict"][stock]["amount"] += amount

    with open("static/data.json", "w") as file:
        json.dump(data, file)

    return render_template("index.html", money=data["money"],
                           message=f'Successful Transaction - You bought {amount} stocks of {stock} for {total_of}$.',
                           stocks_list=data["stocks_list"], stocks_dict=data["stocks_dict"])


@app.route('/', methods=['GET'])
@app.route('/Home', methods=['GET'])
def home():
    with open("static/data.json", "r") as file:
        data = json.load(file)
    return render_template("index.html", money=data["money"],
                           stocks_list=data["stocks_list"], stocks_dict=data["stocks_dict"])


@app.route("/Sell", methods=["GET"])
def sell():
    with open("static/data.json", "r") as file:
        data = json.load(file)

    return render_template("sell.html", money=data["money"],
                           stocks_list=data["stocks_list"], stocks_dict=data["stocks_dict"])


@app.route("/impute-form3", methods=["POST"])
def impute_form3():
    with open("static/data.json", "r") as file:
        data = json.load(file)

    amount = int(request.form.get("amount"))
    stock = request.form.get("stock", None)

    if not stock:
        return render_template("index.html", money=data["money"],
                               message="Action incomplete - No stock chosen.",
                               stocks_list=data["stocks_list"], stocks_dict=data["stocks_dict"])

    if amount > data["stocks_dict"][stock]["amount"]:
        return render_template("index.html", money=data["money"],
                               message="Action incomplete - Not enough stocks to sell.",
                               stocks_list=data["stocks_list"], stocks_dict=data["stocks_dict"])

    _, stock_price = get_stock_info(stock)

    total_income = float(stock_price) * amount

    data["money"] += total_income

    data["stocks_dict"][stock]["amount"] -= amount
    if data["stocks_dict"][stock]["amount"] == 0:
        data["stocks_list"] = [s for s in data["stocks_list"] if s != stock]

    with open("static/data.json", "w") as file:
        json.dump(data, file)

    return render_template("index.html", money=data["money"],
                           message=f"Successful Transaction - You sold {amount} stocks of {stock} for {total_income}$.",
                           stocks_list=data["stocks_list"], stocks_dict=data["stocks_dict"])


if __name__ == "__main__":
    app.run(debug=True, host='0.0.0.0', port=5000, use_reloader=True)
